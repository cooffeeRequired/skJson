on script load:
    bind json file "./whitelist.json" as "whitelist"

test "has all keys":
    set {_json} to json from "{array: [{A: 1, B: 2, C: 3, location: {}}]}"
    assert {_json} has all keys "array" with "failing: check keys"

test "has all values":
    set {_json} to json from "{array: [{A: 1, B: 2, C: 3, location: {}}]}"
    assert {_json}.array[0] has all values 1 and 2 with "failing: check values"

test "has all values !negation":
    set {_json} to json from "{array: [{A: 1, B: 2, C: 3, location: {}}]}"
    assert {_json}.array[0] does not have all values 1 and 5 with "failing: check values !negation"

test "has all keys !negation":
    set {_json} to json from "{}"
    assert {_json} does not have all keys "array" with "failing: check keys !negation"

test "type of json is json-object":
    set {_json} to json from "{array: [{A: 1, B: 2, C: 3, location: {}}]}"
    assert json type of {_json} is json object with "failing: o is json object"

test "type of json is json-array":
    set {_json} to json from "[{A: 1, B: 2, C: 3, location: {}}]"
    assert json type of {_json} is json array with "failing: o is json array"

test "json file exists":
    assert json file "./whitelist.json" exists with "failing: json file exists"
    assert json file "./whitelist2.json" does not exist with "failing: json file does not exist"

test "json is empty":
    set {_json} to json from "[]"
    assert json {_json} is empty with "failing: json is empty"
    set {_json} to json from "[1, 2, 3]"
    assert json {_json} is not empty with "failing: json is not empty !negation"


test "json is chached":
    assert true is true with "failing: whitelist is chached"

test "json is listened":
    assert true is true with "failing: whitelist is listened"


